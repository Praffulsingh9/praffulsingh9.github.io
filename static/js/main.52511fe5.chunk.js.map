{"version":3,"sources":["logo.svg","components/searchInput.js","components/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["SearchInput","props","type","placeholder","value","onChange","e","style","marginRight","SideModal","closeTimeoutMS","isOpen","display","alignItems","justifyContent","Button","variant","onClick","toggle","Form","Row","Group","as","Col","controlId","Label","Control","selectedRow","PNR_No","customStyles","singleValue","provided","state","color","option","input","valueContainer","container","width","margin","defaultStyles","App","useState","data","setRecords","isLoading","setIsLoading","pnr","setpnr","contact","setcontact","masterData","setmasterData","name","setName","start","setStart","end","setEnd","error","setError","setSelectedRow","useEffect","a","axios","get","result","fetchRecords","columns","React","useMemo","Header","accessor","sortType","sortable","Cell","split","onChangeDate","key","tableInstance","useTable","initialState","pageIndex","pageSize","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","nextPage","pageOptions","pageCount","gotoPage","previousPage","setPageSize","lg","md","sm","padding","minHeight","target","newRecords","filter","f","toString","includes","onChangePNR","Contact_Number","onChangeContact","flexDirection","Name","label","onChangeName","options","map","m","i","styles","size","Date_of_journey","apply","length","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","borderBottom","background","fontWeight","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","textDecoration","values","onPnrClick","className","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52511fe5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\n\nexport default function SearchInput(props) {\n  return (\n    <input\n      type=\"text\"\n      placeholder={props.placeholder}\n      value={props.value}\n      onChange={(e) => props.onChange(e)}\n      style={{marginRight:5}}\n    />\n  );\n}\n","import React from \"react\";\nimport Modal from \"react-modal\";\nimport \"./modal_styles.css\";\nimport { Button, Form, Col } from \"react-bootstrap\";\nexport default function SideModal(props) {\n  return (\n    <Modal closeTimeoutMS={500} isOpen={props.isOpen}>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"flex-end\",\n          justifyContent: \"flex-end\",\n        }}\n      >\n        <Button variant=\"danger\" onClick={() => props.toggle()}>\n          Close\n        </Button>\n      </div>\n      <Form>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formGridPNR\">\n            <Form.Label>PNR_NO</Form.Label>\n            <Form.Control type=\"text\" value={props.selectedRow.PNR_No} />\n          </Form.Group>\n\n          <Form.Group as={Col} controlId=\"formGridName\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control type=\"text\" value={props.selectedRow[\"Name\"]} />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formGridPNR\">\n            <Form.Label>From</Form.Label>\n            <Form.Control type=\"text\" value={props.selectedRow[\"From\"]} />\n          </Form.Group>\n\n          <Form.Group as={Col} controlId=\"formGridName\">\n            <Form.Label>To</Form.Label>\n            <Form.Control type=\"text\" value={props.selectedRow[\"To\"]} />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formGridCity\">\n            <Form.Label>Contact Number</Form.Label>\n            <Form.Control type=\"text\" value={props.selectedRow[\"Contact_Number\"]}/>\n          </Form.Group>\n\n          <Form.Group as={Col} controlId=\"formGridCity\">\n            <Form.Label>Date Of Journey</Form.Label>\n            <Form.Control type=\"text\" value={props.selectedRow[\"Date_of_journey\"]}/>\n          </Form.Group>\n\n          <Form.Group as={Col} controlId=\"formGridZip\">\n            <Form.Label>Total Amount</Form.Label>\n            <Form.Control type=\"text\" value={props.selectedRow[\"Total_Amount\"]}/>\n          </Form.Group>\n        </Form.Row>\n      </Form>\n    </Modal>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\nimport { useTable, usePagination, useSortBy } from \"react-table\";\nimport SearchInput from \"./components/searchInput\";\nimport { Row, Col, Button } from \"react-bootstrap\";\nimport SideModal from \"./components/Modal\";\n\nconst customStyles = {\n  singleValue: (provided, state) => ({\n    ...provided,\n    color: \"black\",\n  }),\n  option: (provided, state) => ({\n    ...provided,\n    color: \"black\",\n  }),\n  input: (provided) => ({\n    ...provided,\n    color: \"black\",\n  }),\n  valueContainer: (provided, state) => ({\n    ...provided,\n    color: \"black\",\n  }),\n  container: (provided, state) => ({\n    ...provided,\n    color: \"black\",\n    width: 200,\n    margin: 10,\n  }),\n  placeholder: (defaultStyles) => ({\n    ...defaultStyles,\n    color: \"black\",\n  }),\n};\n\nfunction App() {\n  const [data, setRecords] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [pnr, setpnr] = useState(\"\");\n  const [contact, setcontact] = useState(\"\");\n  const [masterData, setmasterData] = useState([]);\n  const [name, setName] = useState();\n  const [start, setStart] = useState();\n  const [end, setEnd] = useState();\n  const [error, setError] = useState(\"\");\n  const [isOpen, toggle] = useState(false);\n  const [selectedRow, setSelectedRow] = useState({});\n\n  useEffect(() => {\n    let fetchRecords = async () => {\n      const result = await axios.get(\n        \"https://6033d1cc843b150017931a99.mockapi.io/records\"\n      );\n      setRecords(result.data);\n      setmasterData(result.data);\n      setIsLoading(false);\n    };\n    fetchRecords();\n  }, []);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Name\",\n        accessor: \"Name\",\n        sortType: \"basic\",\n      },\n      {\n        Header: \"Contact_Number\",\n        accessor: \"Contact_Number\",\n        sortable: false,\n      },\n      {\n        Header: \"PNR_No\",\n        accessor: \"PNR_No\",\n      },\n      {\n        Header: \"From\",\n        accessor: \"From\",\n      },\n      {\n        Header: \"To\",\n        accessor: \"To\",\n      },\n      {\n        Header: \"Date_of_journey\",\n        accessor: \"Date_of_journey\",\n        sortType: \"basic\",\n        Cell: (props) => {\n          \n          return <p>{props.value.split(\"T\")[0]}</p>;\n        },\n      },\n      {\n        Header: \"Total_Amount\",\n        accessor: \"Total_Amount\",\n      },\n    ],\n    []\n  );\n\n  const onChangePNR = (e) => {\n    setcontact(\"\");\n    setpnr(e.target.value);\n    let newRecords = masterData.filter((f) =>\n      f.PNR_No.toString().includes(e.target.value)\n    );\n\n    setRecords(newRecords);\n  };\n\n  const onChangeContact = (e) => {\n    setpnr(\"\");\n    setcontact(e.target.value);\n    let newRecords = masterData.filter((f) =>\n      f.Contact_Number.toString().includes(e.target.value)\n    );\n\n    setRecords(newRecords);\n  };\n\n  const onChangeName = (e) => {\n   \n    let newRecords = masterData.filter((f) =>\n      f.Name.toString().includes(e.label)\n    );\n    setName(e);\n    setRecords(newRecords);\n  };\n\n  const onChangeDate = (e, key) => {\n    if (key == \"start\") {\n      setStart(e);\n    } else {\n      setEnd(e);\n    }\n  };\n\n  const apply = () => {\n    if (start && end) {\n      let newRecords = masterData.filter(\n        (f) =>\n          f.Date_of_journey.toString().split(\"T\")[0] >= start.label &&\n          f.Date_of_journey.toString().split(\"T\")[0] <= end.label\n      );\n      setRecords(newRecords);\n    } else if (!start && !end) {\n      setError(\"Select Start and End Date\");\n    } else if (!end) {\n      setError(\"Select End Date\");\n    } else if (!start) {\n      setError(\"Select Start Date\");\n    }\n  };\n\n  const reset = () => {\n    setEnd();\n    setStart();\n    setName();\n    setRecords(masterData);\n  };\n\n  const onPnrClick = (row) => {\n    setSelectedRow(row.values);\n    toggle(true);\n  };\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0, pageSize: 10 },\n    },\n    useSortBy,\n    usePagination\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page, // Instead of using 'rows', we'll use page,\n    // which has only the rows for the active page\n\n    // The rest of these things are super handy, too ;)\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = tableInstance;\n\n  return (\n    <Row>\n      <Col lg={12} md={10} sm={10}>\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            padding: 10,\n            minHeight: \"100vh\",\n          }}\n        >\n          {isLoading ? (\n            \"Loading...\"\n          ) : (\n            <div style={{ width: \"80%\" }}>\n              <SearchInput\n                placeholder=\"Search by PNR\"\n                value={pnr}\n                onChange={(e) => onChangePNR(e)}\n              />\n              <SearchInput\n                placeholder=\"Search by Contact\"\n                value={contact}\n                onChange={(e) => onChangeContact(e)}\n              />\n              <div\n                style={{ margin: 10, display: \"flex\", flexDirection: \"row\" }}\n              >\n                <Select\n                  name=\"singleSelect\"\n                  value={name ? name : null}\n                  onChange={(value) => onChangeName(value)}\n                  options={masterData.map((m, i) => ({\n                    label: m.Name,\n                    value: i + 1,\n                  }))}\n                  placeholder=\"Select Name\"\n                  styles={customStyles}\n                />\n              </div>\n              <div\n                style={{ margin: 10, display: \"flex\", flexDirection: \"row\" }}\n              >\n                <Select\n                  value={start ? start : null}\n                  onChange={(value) => onChangeDate(value, \"start\")}\n                  options={masterData.map((m, i) => ({\n                    label: m[\"Date_of_journey\"].split(\"T\")[0],\n                    value: i + 1,\n                  }))}\n                  placeholder=\"Select Start Date\"\n                  styles={customStyles}\n                />\n                <Select\n                  value={end ? end : null}\n                  onChange={(value) => onChangeDate(value, \"end\")}\n                  options={masterData.map((m, i) => ({\n                    label: m[\"Date_of_journey\"].split(\"T\")[0],\n                    value: i + 1,\n                  }))}\n                  placeholder=\"Select End State\"\n                  styles={customStyles}\n                />\n                <Button variant=\"success\" size=\"lg\" onClick={() => apply()}>\n                  Apply\n                </Button>\n                <Button variant=\"danger\" size=\"lg\" onClick={() => reset()}>\n                  Reset\n                </Button>\n              </div>\n              {error.length > 0 && error}\n              <table {...getTableProps()}>\n                <thead>\n                  {\n                    // Loop over the header rows\n                    headerGroups.map((headerGroup) => (\n                      // Apply the header row props\n                      <tr {...headerGroup.getHeaderGroupProps()}>\n                        {\n                          // Loop over the headers in each row\n                          headerGroup.headers.map((column) => (\n                            // Apply the header cell props\n                            <th\n                              {...column.getHeaderProps(\n                                column.getSortByToggleProps()\n                              )}\n                              style={{\n                                borderBottom: \"solid 3px red\",\n                                background: \"aliceblue\",\n                                color: \"black\",\n                                fontWeight: \"bold\",\n                              }}\n                            >\n                              {\n                                // Render the header\n                                column.render(\"Header\")\n                              }\n                              <span>\n                                {column.isSorted\n                                  ? column.isSortedDesc\n                                    ? \" 🔽\"\n                                    : \" 🔼\"\n                                  : \"\"}\n                              </span>\n                            </th>\n                          ))\n                        }\n                      </tr>\n                    ))\n                  }\n                </thead>\n                {/* Apply the table body props */}\n                <tbody {...getTableBodyProps()}>\n                  {\n                    // Loop over the table rows\n                    page.map((row) => {\n                      // Prepare the row for display\n                      prepareRow(row);\n                      return (\n                        // Apply the row props\n                        <tr {...row.getRowProps()}>\n                          {\n                            // Loop over the rows cells\n                            row.cells.map((cell) => {\n                              // Apply the cell props\n                              return (\n                                <td {...cell.getCellProps()}>\n                                  {\n                                    // Render the cell contents\n                                    cell.column.Header === \"PNR_No\" ? (\n                                      <a\n                                        style={{\n                                          textDecoration: \"underline\",\n                                          color: \"blue\",\n                                        }}\n                                        onClick={() => onPnrClick(row)}\n                                      >\n                                        {cell.render(\"Cell\")}\n                                      </a>\n                                    ) : cell.column.Header ===\n                                      \"Date_of_journey\" ? (\n                                      <p>{cell.render(\"Cell\")}</p>\n                                    ) : (\n                                      cell.render(\"Cell\")\n                                    )\n                                  }\n                                </td>\n                              );\n                            })\n                          }\n                        </tr>\n                      );\n                    })\n                  }\n                </tbody>\n              </table>\n              <div className=\"pagination\">\n                <button\n                  onClick={() => previousPage()}\n                  disabled={!canPreviousPage}\n                >\n                  {\"Previous\"}\n                </button>{\" \"}\n                <button onClick={() => nextPage()} disabled={!canNextPage}>\n                  {\"Next\"}\n                </button>{\" \"}\n              </div>\n            </div>\n          )}\n        </div>\n      </Col>\n      <SideModal\n        isOpen={isOpen}\n        selectedRow={selectedRow}\n        toggle={() => {\n          toggle(!isOpen);\n        }}\n      />\n    </Row>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}